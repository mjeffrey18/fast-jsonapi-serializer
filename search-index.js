crystal_doc_search_index_callback({"repository_name":"fast-jsonapi-serializer","body":"# FastJSONAPISerializer\n\n![Build Status](https://github.com/mjeffrey18/fast-jsonapi-serializer/actions/workflows/ci.yml/badge.svg?branch=main) [![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://mjeffrey18.github.io/fast-jsonapi-serializer/) [![GitHub release](https://img.shields.io/github/release/mjeffrey18/fast-jsonapi-serializer.svg)](https://github.com/mjeffrey18/fast-jsonapi-serializer/releases)\n\n\nFast JSON-API Serializer is a fast, flexible and simple [JSON-API](https://jsonapi.org) serializer for crystal.\n\nRefer to the full API [documentation](https://mjeffrey18.github.io/fast-jsonapi-serializer/)\n\n## Why use it? ðŸ˜…\n\n- Works with any ORM or plain Crystal objects.\n- Offers a very flexible API.\n- Did I mention it was fast?\n\n## Benchmarks ðŸš€\n\n> **Spoiler** **~200%** faster!\n\n*Compared to other JSON-API compliant alternatives. Sure, benchmarks are to be taken with a grain of salt...*\n\nSee `examples/benchmark.cr` for the full benchmark setup.\n\n(Kitchen Sink) With various relationships and all API features used -\n\n```\nFastJSONAPISerializer  66.54k ( 15.03Âµs) (Â± 2.25%)  22.2kB/op        fastest\n    JSONApiSerializer  34.32k ( 29.14Âµs) (Â± 2.49%)  33.0kB/op   1.94Ã— slower\n```\n\nSingle object with 1 attribute\n\n```\nFastJSONAPISerializer 881.46k (  1.13Âµs) (Â± 1.98%)  1.47kB/op        fastest\n    JSONApiSerializer 669.06k (  1.49Âµs) (Â± 2.65%)  1.44kB/op   1.32Ã— slower\n```\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  fast-jsonapi-serializer:\n    github: mjeffrey18/fast-jsonapi-serializer\n```\n\n2. Run `shards install`\n\n## Setup\n\nRequire the shard in your project.\n\n```crystal\nrequire \"fast-jsonapi-serializer\"\n```\n\n## Usage\n\n### Quick Introduction\n\nConsidering a model/resource (ORM or plain crystal class)\n\n```crystal\nclass Restaurant\n  property name\n\n  def initialize(@name = \"big burgers\")\n  end\nend\n```\n\nCreate a serializer which inherits from `FastJSONAPISerializer::Base(YourResourceClass)`\n\n```crystal\nclass RestaurantSerializer < FastJSONAPISerializer::Base(Restaurant)\n  attribute :name\nend\n```\n\nUse the `serialize` API to to build a `JSON-API` compatible string\n\n#### Single Resource\n\n```crystal\nresource = Restaurant.new\nRestaurantSerializer.new(resource).serialize\n```\n\nExample above produces this output (made readable for docs):\n\n```json\n{\n  \"data\": {\n    \"id\": \"1\",\n    \"type\": \"restaurant\",\n    \"attributes\": {\n      \"name\": \"big burgers\"\n    }\n  }\n}\n```\n\n#### Resource Collection\n\n```crystal\nresources = [Restaurant.new, Restaurant.new]\nRestaurantSerializer.new(resources).serialize\n\n```\n\nExample above produces this output (made readable for docs):\n\n```json\n{\n  \"data\": [\n    {\n      \"id\": \"1\",\n      \"type\": \"restaurant\",\n      \"attributes\": {\n        \"name\": \"big burgers\"\n      }\n    },\n    {\n      \"id\": \"2\",\n      \"type\": \"restaurant\",\n      \"attributes\": {\n        \"name\": \"big sandwiches\"\n      }\n    }\n  ]\n}\n```\n\n### Type\n\nBy default, the JSON-API type key will be the *snake_case* name of the resource class i.e. `AdminUser -> \"admin_user\"`.\nYou can override this behaviour by setting the `type(String)` macro.\n\n```crystal\nclass AdminUserSerializer < FastJSONAPISerializer::Base(AdminUser)\n  type \"user\"\n  attribute :name\nend\n```\n\nExample above produces this output (made readable for docs):\n\n```json\n{\n  \"data\": {\n    \"id\": \"1\",\n    \"type\": \"user\",\n    \"attributes\": {\n      \"name\": \"Joe\"\n    }\n  }\n}\n```\n\n### ID\n\nYour resource class should have an id instance method or getter to populate the JSON `id` field of the resource.\n\n#### Supported ID's\n\n- Integer\n- String\n- UUID\n- Nil\n\nIf the resource does not respond to `id` the JSON `id` value will become `null` - giving a little more flexibility, although not advised or complaint with the `JSON-API` standard.\n\n> IMPORTANT - As per the [JSON-API](https://jsonapi.org) standard, we always convert the id to a string.\n\nExample without and id below;\n\n```crystal\nclass Restaurant\n  property name\n\n  def initialize(@name = \"big burgers\")\n  end\nend\n\nclass RestaurantSerializer < FastJSONAPISerializer::Base(Restaurant)\n  attribute :name\nend\n\nRestaurantSerializer.new(Restaurant.new).serialize\n```\n\nExample above produces this output (made readable for docs):\n\n```json\n{\n  \"data\": {\n    \"id\": null,\n    \"type\": \"restaurant\",\n    \"attributes\": {\n      \"name\": \"big burgers\"\n    }\n  }\n}\n```\n\n### Attributes\n\nThe attributes API is very flexible.\n\n**Single** `attribute`\n\n```crystal\nclass RestaurantSerializer < FastJSONAPISerializer::Base(Restaurant)\n  attribute :name\n  attribute :street\nend\n```\n\n**Multiple** `attributes`\n\n```crystal\nclass RestaurantSerializer < FastJSONAPISerializer::Base(Restaurant)\n  attributes :name, :street\nend\n```\n\n**Mixed**\n\n```crystal\nclass RestaurantSerializer < FastJSONAPISerializer::Base(Restaurant)\n  attributes :name, :street\n  attribute :post_code\nend\n```\n\n**Serializer methods**\n\nYou can also list `attributes` which are on the serializer class;\n\n```crystal\nclass RestaurantSerializer < FastJSONAPISerializer::Base(Restaurant)\n  attribute :name\n  attribute :custom_method_on_serializer\n\n  def custom_method_on_serializer\n    123\n  end\nend\n```\n\n#### Control the attribute JSON key name\n\nLet's say you want to have different key name or case, you can pass this as a second argument `attribute`\n\n```crystal\nclass RestaurantSerializer < FastJSONAPISerializer::Base(Restaurant)\n  attribute :name, :FullName\nend\n```\n\nExample above produces this output (made readable for docs):\n\n```json\n{\n  \"data\": {\n    \"id\": \"1\",\n    \"type\": \"restaurant\",\n    \"attributes\": {\n      \"FullName\": \"big burgers\"\n    }\n  }\n}\n```\n\n#### Conditional control of the attributes\n\n**Attribute API**\n\n```crystal\nclass RestaurantSerializer < FastJSONAPISerializer::Base(Restaurant)\n  attribute :name, :FullName, if: :should_show_name\n\n  def should_show_name(object, _options)\n    object.has_full_name?\n  end\nend\n\nRestaurantSerializer.new(Restaurant.new).serialize\n```\n\nOR\n\nUse the `serialize(options: ...)` API to control the attributes\n\n```crystal\nclass RestaurantSerializer < FastJSONAPISerializer::Base(Restaurant)\n  attribute :name, :FullName, if: :should_show_name\n\n  def should_show_name(object, options)\n    object.has_full_name? && options[:allow_name]\n  end\nend\n\nRestaurantSerializer.new(Restaurant.new).serialize(\n  options: {:allow_name => true}\n)\n```\n\n**Serialize API**\n\nWe can have any number of attributes which can be excluded on demand.\n\nUse the `serialize(except: ...)` API to control the attributes\n\n```crystal\nclass RestaurantSerializer < FastJSONAPISerializer::Base(Restaurant)\n  attribute :name, :address, :post_code\nend\n\nRestaurantSerializer.new(Restaurant.new).serialize(\n  except: %i(name postcode)\n)\n```\n\nExample above produces this output (made readable for docs):\n\n```json\n{\n  \"data\": {\n    \"id\": \"1\",\n    \"type\": \"restaurant\",\n    \"attributes\": {\n      \"address\": \"somewhere cool\"\n    }\n  }\n}\n```\n\n### Relations\n\nThe following relationships are supported:\n\n- `belongs_to`\n- `has_many`\n- `has_one`\n\nGiven a model which has various associations like follows:\n\n```crystal\nclass Restaurant\n  property id : String,\n    name : String,\n    address : Nil | Address = nil,\n    post_code : Nil | PostCode = nil,\n    rooms : Array(Room) = [] of Room\n\n  def initialize(@id, @name = \"big burgers\")\n  end\n\n  def tables\n    [Table.new(1), Table.new(2), Table.new(3)]\n  end\nend\n```\n\nYou can define the serializer relationships\n\n```crystal\nclass RestaurantSerializer < FastJSONAPISerializer::Base(Restaurant)\n  attribute :name\n\n  belongs_to :address, AddressSerializer\n\n  has_one :post_code, PostCodeSerializer\n\n  has_many :rooms, RoomSerializer\n  has_many :tables, TableSerializer, :Tables # here we can override the name (optional)\nend\n\n# Or if you prefer a more explicit approach\n\nclass RestaurantSerializer < FastJSONAPISerializer::Base(Restaurant)\n  attribute :name\n\n  belongs_to :address, serializer: AddressSerializer\n\n  has_one :post_code, serializer: PostCodeSerializer\n\n  has_many :rooms, serializer: RoomSerializer\n  has_many :tables, serializer: TableSerializer, key: :Tables\nend\n```\n\nMake sure to use the `serialize(includes: ...)` API to include the relations:\n\n```crystal\n# build all associations\nresource = Restaurant.new\nresource.address = Address.new\nresource.post_code = PostCode.new\nroom = Room.new(1)\nroom.tables = [Table.new(1), Table.new(2)]\nresource.rooms = [room]\n\nRestaurantSerializer.new(resource).serialize(\n  includes: {\n    :address   => [:address],\n    :post_code => [:post_code],\n    :tables    => {:room => [:room]}, # notice nested associations also\n  }\n)\n```\n\n> **IMPORTANT** - Relationships do nothing unless requested via the `serialize(includes: ...)` API\n\nExample above produces this output (made readable for docs):\n\n```json\n{\n  \"data\": {\n    \"id\": \"1\",\n    \"type\": \"restaurant\",\n    \"attributes\": {\n      \"name\": \"big burgers\"\n    },\n    \"relationships\": {\n      \"address\": {\n        \"data\": {\n          \"id\": \"101\",\n          \"type\": \"address\"\n        }\n      },\n      \"post_code\": {\n        \"data\": {\n          \"id\": \"101\",\n          \"type\": \"post_code\"\n        }\n      },\n      \"Tables\": {\n        \"data\": [\n          {\n            \"id\": \"1\",\n            \"type\": \"table\"\n          },\n          {\n            \"id\": \"2\",\n            \"type\": \"table\"\n          },\n          {\n            \"id\": \"3\",\n            \"type\": \"table\"\n          }\n        ]\n      }\n    }\n  },\n  \"included\": [\n    {\n      \"id\": \"101\",\n      \"type\": \"address\",\n      \"attributes\": {\n        \"street\": \"some street\"\n      }\n    },\n    {\n      \"id\": \"101\",\n      \"type\": \"post_code\",\n      \"attributes\": {\n        \"code\": \"code 24\"\n      }\n    },\n    {\n      \"id\": \"1\",\n      \"type\": \"room\",\n      \"attributes\": {\n        \"name\": \"1-name\"\n      },\n      \"relationships\": {}\n    },\n    {\n      \"id\": \"1\",\n      \"type\": \"table\",\n      \"attributes\": {\n        \"number\": 1\n      },\n      \"relationships\": {\n        \"room\": {\n          \"data\": {\n            \"id\": \"1\",\n            \"type\": \"room\"\n          }\n        }\n      }\n    },\n    {\n      \"id\": \"2\",\n      \"type\": \"room\",\n      \"attributes\": {\n        \"name\": \"2-name\"\n      },\n      \"relationships\": {}\n    },\n    {\n      \"id\": \"2\",\n      \"type\": \"table\",\n      \"attributes\": {\n        \"number\": 2\n      },\n      \"relationships\": {\n        \"room\": {\n          \"data\": {\n            \"id\": \"2\",\n            \"type\": \"room\"\n          }\n        }\n      }\n    },\n    {\n      \"id\": \"3\",\n      \"type\": \"room\",\n      \"attributes\": {\n        \"name\": \"3-name\"\n      },\n      \"relationships\": {}\n    },\n    {\n      \"id\": \"3\",\n      \"type\": \"table\",\n      \"attributes\": {\n        \"number\": 3\n      },\n      \"relationships\": {\n        \"room\": {\n          \"data\": {\n            \"id\": \"3\",\n            \"type\": \"room\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n### Meta\n\nYou can add meta details to the JSON response payload.\n\n**Serialize API**\n\nUse the `serialize(meta: ...)` API to control the meta attributes\n\n```crystal\nRestaurantSerializer.new(Restaurant.new).serialize(\n  meta: {:page => 0, :limit => 50}\n)\n```\n\nExample above produces this output (made readable for docs):\n\n```json\n{\n  \"data\": {\n    \"id\": \"1\",\n    \"type\": \"restaurant\",\n    \"attributes\": {\n      \"name\": \"big burgers\"\n    }\n  },\n  \"meta\": {\n    \"page\": 0,\n    \"limit\": 50\n  }\n}\n```\n\n**.meta class method**\n\nYou can define default meta attributes as a class method on the serializer.\n\nUsing the `serialize(meta: ...)` API you can **merge** or **override** the default meta attributes\n\n```crystal\nclass RestaurantSerializer < FastJSONAPISerializer::Base(Restaurant)\n  def self.meta(options)\n    {\n      :status => \"ok\"\n    } of Symbol => FastJSONAPISerializer::MetaAny\n  end\nend\n\nRestaurantSerializer.new(Restaurant.new).serialize(\n  meta: {:page => 0, :limit => 50}\n)\n```\n\n> Note - `FastJSONAPISerializer::MetaAny` -> (JSON::Any::Type | Int32)\n\nExample above produces this output (made readable for docs):\n\n```json\n{\n  \"data\": {\n    \"id\": \"1\",\n    \"type\": \"restaurant\",\n    \"attributes\": {\n      \"name\": \"big burgers\"\n    }\n  },\n  \"meta\": {\n    \"status\": \"ok\",\n    \"page\": 0,\n    \"limit\": 50\n  }\n}\n```\n\n### Serialize API\n\nWe covered all the options in the previous examples but this shows all available options.\n\n- `except` - array of fields which should be excluded\n- `includes` - definition of relation that should be included\n- `options` - options that will be passed to methods defined for `if` attribute options and `.meta(options)`\n- `meta` - meta attributes to be added under `\"meta\"` key at root level, merged into default `.meta`\n\nKitchen sink example:\n\n```crystal\nRestaurantSerializer.new(resource).serialize(\n  except: %i(name),\n  includes: {\n    :address   => [:address],\n    :post_code => [:post_code],\n    :tables    => {:room => [:room]},\n  },\n  meta: {:page => 0, :limit => 50},\n  options: {:show_rating => true}\n)\n```\n\n### Inheritance\n\nYou can DRY your serializers with inheritance - just add required attributes and/or associations in the subclasses.\n\n```crystal\nclass UserSerializer < Serializer::Base(User)\n  attributes :name, :age\nend\n\nclass FullUserSerializer < UserSerializer\n  attributes :email, :created_at\n\n  has_many :identities, IdentitySerializer\nend\n```\n\n## TODO\n\n- Allow Proc based conditional attributes\n- Allow Proc based conditional relationships\n- Allow global key case-change option\n- Allow links meta data\n- Add safety checks for inputs and bad data\n\n## Contributing\n\n1. Fork it (<https://github.com/mjeffrey18/fast-jsonapi-serializer/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Acknowledgements\n\nThis project was based on concepts gather from another amazing open source shard - [serializer](https://github.com/imdrasil/serializer)\n\nThank you so much for the inspiration!\n\n--\n\nI did use this shard as a bench comparison, but with good intentions. Big shout out to [jsonapi-serializer-cr](https://github.com/andersondanilo/jsonapi-serializer-cr)\n\nThis project is awesome and has helped me build projects, great work!\n\n## Contributors\n\n- [Marc Jeffrey](https://github.com/mjeffrey18) - creator and maintainer\n","program":{"html_id":"fast-jsonapi-serializer/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"fast-jsonapi-serializer","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"fast-jsonapi-serializer/FastJSONAPISerializer","path":"FastJSONAPISerializer.html","kind":"module","full_name":"FastJSONAPISerializer","name":"FastJSONAPISerializer","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/fast-jsonapi-serializer.cr","line_number":4,"url":null},{"filename":"src/fast-jsonapi-serializer/base.cr","line_number":3,"url":null},{"filename":"src/fast-jsonapi-serializer/dsl.cr","line_number":1,"url":null}],"repository_name":"fast-jsonapi-serializer","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"fast-jsonapi-serializer/FastJSONAPISerializer/Base","path":"FastJSONAPISerializer/Base.html","kind":"class","full_name":"FastJSONAPISerializer::Base(T)","name":"Base","abstract":true,"superclass":{"html_id":"fast-jsonapi-serializer/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"fast-jsonapi-serializer/FastJSONAPISerializer/DSL","kind":"module","full_name":"FastJSONAPISerializer::DSL","name":"DSL"},{"html_id":"fast-jsonapi-serializer/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"fast-jsonapi-serializer/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/fast-jsonapi-serializer/base.cr","line_number":304,"url":null}],"repository_name":"fast-jsonapi-serializer","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"fast-jsonapi-serializer/FastJSONAPISerializer/DSL","kind":"module","full_name":"FastJSONAPISerializer::DSL","name":"DSL"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"fast-jsonapi-serializer/FastJSONAPISerializer","kind":"module","full_name":"FastJSONAPISerializer","name":"FastJSONAPISerializer"},"doc":"Base serialization superclass.\n\nConsidering you have various models - which can be from an ORM or just simple classes\n\n```\nclass Address\n  getter id\n  property street\n\n  def initialize(@id = 101, @street = \"some street\")\n  end\nend\n\nclass PostCode\n  getter id\n  property code\n\n  def initialize(@id = 101, @code = \"code 24\")\n  end\nend\n\nclass Restaurant\n  property name,\n    address : Nil | Address = nil,\n    post_code : Nil | PostCode = nil,\n    rooms : Array(Room) = [] of Room\n\n  def initialize(@name = \"big burgers\")\n  end\n\n  def rating\n    \"Great!\"\n  end\n\n  # optional static id\n  def id\n    1\n  end\n\n  def tables\n    [Table.new(1), Table.new(2), Table.new(3)]\n  end\nend\n\nclass Room\n  property id : Int32 = 1,\n    tables : Array(Table) = [] of Table\n\n  def initialize(@id)\n  end\n\n  def name\n    \"#{id}-name\"\n  end\nend\n\nclass Table\n  property number\n\n  def initialize(@number = 1)\n  end\n\n  def room\n    Room.new(number)\n  end\n\n  def id\n    number\n  end\nend\n```\nYou can define various serializers\n\n```\nclass AddressSerializer < FastJSONAPISerializer::Base(Address)\n  attributes :street\n  type \"address\" # be specific about the JSON-API type - default to Model camelcase\nend\n\nclass PostCodeSerializer < FastJSONAPISerializer::Base(PostCode)\n  attributes :code\nend\n\nclass RestaurantSerializer < FastJSONAPISerializer::Base(Restaurant)\n  attribute :name\n  attribute :rating, :Rating, if: :test_rating\n  attribute :own_field\n\n  belongs_to :address, serializer: AddressSerializer # option key-word args\n\n  has_one :post_code, PostCodeSerializer\n\n  has_many :rooms, RoomSerializer\n  has_many :tables, TableSerializer, :Tables\n\n  def test_rating(object, options)\n    options.nil? || !options[:test]?\n  end\n\n  def own_field\n    12\n  end\n\n  # default meta\n  def self.meta(*options)\n    {:page => 0}\n  end\nend\n\nclass RoomSerializer < FastJSONAPISerializer::Base(Room)\n  attribute :name\n\n  has_many :tables, TableSerializer\nend\n\nclass TableSerializer < FastJSONAPISerializer::Base(Table)\n  attribute :number\n\n  belongs_to :room, RoomSerializer\nend\n```\n\nBuild your serialized json\n\n```\nresource = Restaurant.new\nresource.address = Address.new\nresource.post_code = PostCode.new\nroom = Room.new(1)\nroom.tables = [Table.new(1), Table.new(2)]\nresource.rooms = [room]\n\nRestaurantSerializer.new(resource).serialize(\n  except: %i(name),\n  includes: {\n    :address   => [:address],\n    :post_code => [:post_code],\n    :tables    => {:room => [:room]},\n  },\n  meta: {:page => 0, :limit => 50},\n  options: {:test => true}\n)\n```\n\nExample above produces next output (this one is made to be readable -\nreal one has no newlines and indentations):\n\n```json\n{\n  \"data\": {\n    \"id\": \"1\",\n    \"type\": \"restaurant\",\n    \"attributes\": {\n      \"own_field\": 12\n    },\n    \"relationships\": {\n      \"address\": {\n        \"data\": {\n          \"id\": \"101\",\n          \"type\": \"address\"\n        }\n      },\n      \"post_code\": {\n        \"data\": {\n          \"id\": \"101\",\n          \"type\": \"post_code\"\n        }\n      },\n      \"Tables\": {\n        \"data\": [\n          {\n            \"id\": \"1\",\n            \"type\": \"table\"\n          },\n          {\n            \"id\": \"2\",\n            \"type\": \"table\"\n          },\n          {\n            \"id\": \"3\",\n            \"type\": \"table\"\n          }\n        ]\n      }\n    }\n  },\n  \"included\": [\n    {\n      \"id\": \"101\",\n      \"type\": \"address\",\n      \"attributes\": {\n        \"street\": \"some street\"\n      }\n    },\n    {\n      \"id\": \"101\",\n      \"type\": \"post_code\",\n      \"attributes\": {\n        \"code\": \"code 24\"\n      }\n    },\n    {\n      \"id\": \"1\",\n      \"type\": \"room\",\n      \"attributes\": {\n        \"name\": \"1-name\"\n      },\n      \"relationships\": {}\n    },\n    {\n      \"id\": \"1\",\n      \"type\": \"table\",\n      \"attributes\": {\n        \"number\": 1\n      },\n      \"relationships\": {\n        \"room\": {\n          \"data\": {\n            \"id\": \"1\",\n            \"type\": \"room\"\n          }\n        }\n      }\n    },\n    {\n      \"id\": \"2\",\n      \"type\": \"room\",\n      \"attributes\": {\n        \"name\": \"2-name\"\n      },\n      \"relationships\": {}\n    },\n    {\n      \"id\": \"2\",\n      \"type\": \"table\",\n      \"attributes\": {\n        \"number\": 2\n      },\n      \"relationships\": {\n        \"room\": {\n          \"data\": {\n            \"id\": \"2\",\n            \"type\": \"room\"\n          }\n        }\n      }\n    },\n    {\n      \"id\": \"3\",\n      \"type\": \"room\",\n      \"attributes\": {\n        \"name\": \"3-name\"\n      },\n      \"relationships\": {}\n    },\n    {\n      \"id\": \"3\",\n      \"type\": \"table\",\n      \"attributes\": {\n        \"number\": 3\n      },\n      \"relationships\": {\n        \"room\": {\n          \"data\": {\n            \"id\": \"3\",\n            \"type\": \"room\"\n          }\n        }\n      }\n    }\n  ],\n  \"meta\": {\n    \"page\": 0,\n    \"limit\": 50\n  }\n}\n```\n\nFor a details about DSL specification see `DSL`.\n\n## Inheritance\n\nYou can DRY your serializers by inheritance - just add required attributes and/or associations in\nthe subclasses.\n\n```\nclass UserSerializer < Serializer::Base(User)\n  attributes :name, :age\nend\n\nclass FullUserSerializer < UserSerializer\n  attributes :email, :created_at\n\n  has_many :identities, IdentitySerializer\nend\n```","summary":"<p>Base serialization superclass.</p>","class_methods":[{"id":"meta(_options)-class-method","html_id":"meta(_options)-class-method","name":"meta","doc":"Returns default meta options.\n\nIf this is empty and no additional meta-options are given - `meta` key is avoided. To define own default meta options\njust override this in your serializer:\n\n```\nclass UserSerializer < FastJSONAPISerializer::Base(User)\n  def self.meta(options)\n    {\n      :status => \"ok\",\n    } of Symbol => FastJSONAPISerializer::MetaAny\n  end\nend\n```","summary":"<p>Returns default meta options.</p>","abstract":false,"args":[{"name":"_options","doc":null,"default_value":"","external_name":"_options","restriction":""}],"args_string":"(_options)","args_html":"(_options)","location":{"filename":"src/fast-jsonapi-serializer/base.cr","line_number":478,"url":null},"def":{"name":"meta","args":[{"name":"_options","doc":null,"default_value":"","external_name":"_options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{} of Symbol => MetaAny"}}],"constructors":[{"id":"new(resource:T|Array(T)?,_included=Set(String).new,_included_keys=Set(Tuple(String,IDAny)).new)-class-method","html_id":"new(resource:T|Array(T)?,_included=Set(String).new,_included_keys=Set(Tuple(String,IDAny)).new)-class-method","name":"new","doc":"Only use @resource\n\n```\nserializer = RestaurantSerializer.new(resource)\n```\n\n@_included and @_included_keys are used internally to build child serializers via associations","summary":"<p>Only use @resource</p>","abstract":false,"args":[{"name":"resource","doc":null,"default_value":"","external_name":"resource","restriction":"T | Array(T) | ::Nil"},{"name":"_included","doc":null,"default_value":"Set(String).new","external_name":"_included","restriction":""},{"name":"_included_keys","doc":null,"default_value":"Set(Tuple(String, IDAny)).new","external_name":"_included_keys","restriction":""}],"args_string":"(resource : T | Array(T)?, _included = <span class=\"t\">Set</span>(<span class=\"t\">String</span>).<span class=\"k\">new</span>, _included_keys = <span class=\"t\">Set</span>(<span class=\"t\">Tuple</span>(<span class=\"t\">String</span>, <span class=\"t\">IDAny</span>)).<span class=\"k\">new</span>)","args_html":"(resource : T | Array(T)?, _included = <span class=\"t\">Set</span>(<span class=\"t\">String</span>).<span class=\"k\">new</span>, _included_keys = <span class=\"t\">Set</span>(<span class=\"t\">Tuple</span>(<span class=\"t\">String</span>, <span class=\"t\">IDAny</span>)).<span class=\"k\">new</span>)","location":{"filename":"src/fast-jsonapi-serializer/base.cr","line_number":496,"url":null},"def":{"name":"new","args":[{"name":"resource","doc":null,"default_value":"","external_name":"resource","restriction":"T | Array(T) | ::Nil"},{"name":"_included","doc":null,"default_value":"Set(String).new","external_name":"_included","restriction":""},{"name":"_included_keys","doc":null,"default_value":"Set(Tuple(String, IDAny)).new","external_name":"_included_keys","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Base(T).allocate\n_.initialize(resource, _included, _included_keys)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"get_type:String-instance-method","html_id":"get_type:String-instance-method","name":"get_type","doc":"Default serializer `type`\nIf class macro `type(str : String)` is not used the type will based on the object passed to the serializer\n\nFormat: will be underscore and downcase\n\n```\nclass AdminUserSerializer < FastJSONAPISerializer::Base(AdminUser)\n  attributes :name, :age\nend\n```\n\n```\nserializer = AdminUserSerializer.new(AdminUser.first)\nserializer.get_type # => `admin_user`\n```","summary":"<p>Default serializer <code>type</code> If class macro <code>type(str : String)</code> is not used the type will based on the object passed to the serializer</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/fast-jsonapi-serializer/base.cr","line_number":553,"url":null},"def":{"name":"get_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"T.name.underscore.downcase"}},{"id":"serialize(except:Array(Symbol)=[]of::Symbol,includes:Array(Symbol)|Hash=[]of::Symbol,options:Hash?=nil,meta:Hash(Symbol,MetaAny)?=nil)-instance-method","html_id":"serialize(except:Array(Symbol)=[]of::Symbol,includes:Array(Symbol)|Hash=[]of::Symbol,options:Hash?=nil,meta:Hash(Symbol,MetaAny)?=nil)-instance-method","name":"serialize","doc":"Generates a JSON formatted string.\n\nArguments:\n\n* `except` - array of fields which should be excluded\n* `includes` - definition of relation that should be included\n* `options` - options that will be passed to methods defined for `if` attribute options and `.meta(options)`\n* `meta` - meta attributes to be added under `\"meta\"` key at root level, merged into default `.meta`\n\n```\nRestaurantSerializer.new(resource).serialize(\n  except: %i(name),\n  includes: {\n    :address   => [:address],\n    :post_code => [:post_code],\n    :tables    => {:room => [:room]},\n  },\n  meta: {:page => 0, :limit => 50},\n  options: {:test => true}\n)\n```\n\n## Includes\n\n*includes* option accepts `Array` or `Hash` values. To define just a list of association of resource object - just pass an array:\n\n```\nRestaurantSerializer.new(object).serialize(includes: [:tables])\n```\n\nYou can also specify deeper and more sophisticated schema by passing `Hash`. In this case hash values should be of\n`Array(Symbol) | Hash | Nil` type. `nil` is used to mark association which name is used for key as a leaf in schema\ntree.","summary":"<p>Generates a JSON formatted string.</p>","abstract":false,"args":[{"name":"except","doc":null,"default_value":"[] of ::Symbol","external_name":"except","restriction":"Array(Symbol)"},{"name":"includes","doc":null,"default_value":"[] of ::Symbol","external_name":"includes","restriction":"Array(Symbol) | Hash"},{"name":"options","doc":null,"default_value":"nil","external_name":"options","restriction":"Hash | ::Nil"},{"name":"meta","doc":null,"default_value":"nil","external_name":"meta","restriction":"Hash(Symbol, MetaAny) | ::Nil"}],"args_string":"(except : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">Symbol</span>, includes : Array(Symbol) | Hash = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">Symbol</span>, options : Hash? = <span class=\"n\">nil</span>, meta : Hash(Symbol, MetaAny)? = <span class=\"n\">nil</span>)","args_html":"(except : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">Symbol</span>, includes : Array(Symbol) | Hash = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">Symbol</span>, options : Hash? = <span class=\"n\">nil</span>, meta : Hash(Symbol, <a href=\"../FastJSONAPISerializer/MetaAny.html\">MetaAny</a>)? = <span class=\"n\">nil</span>)","location":{"filename":"src/fast-jsonapi-serializer/base.cr","line_number":532,"url":null},"def":{"name":"serialize","args":[{"name":"except","doc":null,"default_value":"[] of ::Symbol","external_name":"except","restriction":"Array(Symbol)"},{"name":"includes","doc":null,"default_value":"[] of ::Symbol","external_name":"includes","restriction":"Array(Symbol) | Hash"},{"name":"options","doc":null,"default_value":"nil","external_name":"options","restriction":"Hash | ::Nil"},{"name":"meta","doc":null,"default_value":"nil","external_name":"meta","restriction":"Hash(Symbol, MetaAny) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"String.build do |io|\n  build(io, except, includes, options, meta)\nend"}},{"id":"unique_key(object)-instance-method","html_id":"unique_key(object)-instance-method","name":"unique_key","doc":"builds de-duplication key to be used by @_included_keys(Set)","summary":"<p>builds de-duplication key to be used by @_included_keys(Set)</p>","abstract":false,"args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""}],"args_string":"(object)","args_html":"(object)","location":{"filename":"src/fast-jsonapi-serializer/base.cr","line_number":558,"url":null},"def":{"name":"unique_key","args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{get_type, object.id}"}}],"macros":[],"types":[]},{"html_id":"fast-jsonapi-serializer/FastJSONAPISerializer/DSL","path":"FastJSONAPISerializer/DSL.html","kind":"module","full_name":"FastJSONAPISerializer::DSL","name":"DSL","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/fast-jsonapi-serializer/dsl.cr","line_number":17,"url":null}],"repository_name":"fast-jsonapi-serializer","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"fast-jsonapi-serializer/FastJSONAPISerializer/Base","kind":"class","full_name":"FastJSONAPISerializer::Base(T)","name":"Base"}],"namespace":{"html_id":"fast-jsonapi-serializer/FastJSONAPISerializer","kind":"module","full_name":"FastJSONAPISerializer","name":"FastJSONAPISerializer"},"doc":"Contains DSL required to define required fields and relations for serialization.\n\n```\nclass UserSerializer < FastJSONAPISerializer::Base(User)\n  attribute :name\n  attribute :first_name, \"first-name\"\n  attribute :email, if: :secure?\n\n  has_many :posts, PostSerializer\n\n  def secure?(record, options)\n    options && options[:secure]?\n  end\nend\n```","summary":"<p>Contains DSL required to define required fields and relations for serialization.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"attribute(name,key=nil,ifif_proc=nil)-macro","html_id":"attribute(name,key=nil,ifif_proc=nil)-macro","name":"attribute","doc":"Defines *name* attribute to be serialized.\n\n*name* values will be used as a method name that is called on resource object.\n\nExample 1\n\nGiven a user resource class with a instance method or getter\n\n```\nclass User\n  getter :age\n\n  def name\n    \"Joe\"\n  end\nend\n```\n\nThe serializer will call on those resource attributes\n\n```\nclass UserSerializer < FastJSONAPISerializer::Base(User)\n  attribute :name\n  attribute :age\nend\n```\n\nExample 2\n\nAttributes can be a serializer's own method name. In such case it is called instead.\n\nGiven a user resource class with a instance method or getter\n\n```\nclass User\n  getter :age\n\n  def name\n    \"Joe\"\n  end\nend\n```\n\nThe serializer will call its own method name\n\n```\nclass UserSerializer < FastJSONAPISerializer::Base(User)\n  attribute :name\n  attribute :age\n\n  # this method will be called instead of user.name\n  def name\n    \"Sally\"\n  end\nend\n```\n\nOptions:\n\n* *key* - json key; equals to *name* by default;\n* *if* - name of a method to be used to check whether attribute *name* should be serialized.\n\nMethod given to the *if* should have following signature:\n\n`def method(object : T, options : Hash(Symbol, FastJSONAPISerializer::MetaAny)?)`\n\nReturned type will be used in `if` clause.\n\n```\nclass UserSerializer < FastJSONAPISerializer::Base(User)\n  attribute :name\n  attribute :first_name, \"first-name\"\n  attribute :email, if: :secure?\n\n  def secure?(record, options)\n    options && options[:secure]?\n  end\nend\n```\n\nOR\n\n```\nclass UserSerializer < FastJSONAPISerializer::Base(User)\n  attribute :name\n  attribute :first_name, key: \"first-name\"\n  attribute :email, if: :secure?\n\n  def secure?(record, options)\n    options && options[:secure]?\n  end\nend\n```\nWhichever format you prefer.","summary":"<p>Defines <em>name</em> attribute to be serialized.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""},{"name":"if_proc","doc":null,"default_value":"nil","external_name":"if","restriction":""}],"args_string":"(name, key = <span class=\"n\">nil</span>, if if_proc = <span class=\"n\">nil</span>)","location":{"filename":"src/fast-jsonapi-serializer/dsl.cr","line_number":128,"url":null},"def":{"name":"attribute","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""},{"name":"if_proc","doc":null,"default_value":"nil","external_name":"if","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      \n{% ATTRIBUTES[name] = {key: key || name, if: if_proc} %}\n\n    \n"}},{"id":"attributes(*names)-macro","html_id":"attributes(*names)-macro","name":"attributes","doc":"Defines list of attributes to be serialized from resource.\n\n```\nclass UserSerializer < FastJSONAPISerializer::Base(User)\n  attributes :name, :first_name, :email\nend\n```","summary":"<p>Defines list of attributes to be serialized from resource.</p>","abstract":false,"args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"args_string":"(*names)","location":{"filename":"src/fast-jsonapi-serializer/dsl.cr","line_number":25,"url":null},"def":{"name":"attributes","args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"      \n{% names.reduce(ATTRIBUTES) do |hash, name|\n  hash[name] = {key: name, if: nil}\n  hash\nend %}\n\n    \n"}},{"id":"belongs_to(name,serializer,key=nil)-macro","html_id":"belongs_to(name,serializer,key=nil)-macro","name":"belongs_to","doc":"Defines `one-to-any` *name* association that is serialized by *serializer*.\n\nFor more details see `.has_many`.","summary":"<p>Defines <code>one-to-any</code> <em>name</em> association that is serialized by <em>serializer</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"serializer","doc":null,"default_value":"","external_name":"serializer","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""}],"args_string":"(name, serializer, key = <span class=\"n\">nil</span>)","location":{"filename":"src/fast-jsonapi-serializer/dsl.cr","line_number":173,"url":null},"def":{"name":"belongs_to","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"serializer","doc":null,"default_value":"","external_name":"serializer","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      \n{% RELATIONS[name] = {serializer: serializer, key: key || name, type: :belongs_to} %}\n\n    \n"}},{"id":"has_many(name,serializer,key=nil)-macro","html_id":"has_many(name,serializer,key=nil)-macro","name":"has_many","doc":"Defines `one-to-many` *name* association that is serialized by *serializer*.\n\nOptions:\n\n* *key* - json key; equals to *name* by default;\n* *serializer* - class to be used for association serialization.\n\n```\nclass UserSerializer < FastJSONAPISerializer::Base(User)\n  has_many :posts, PostSerializer\n  has_many :post_comments, CommentSerializer, \"postComments\"\nend\n```\n\nOR\n\n```\nclass UserSerializer < FastJSONAPISerializer::Base(User)\n  has_many :posts, PostSerializer\n  has_many :post_comments, serializer: CommentSerializer, key: \"postComments\"\nend\n```\n\nWhichever format you prefer.\n\nBy default all associations are not serialized. To make an association being serialized\nit should be explicitly specified in *includes* argument of `Base#serialize` method.","summary":"<p>Defines <code>one-to-many</code> <em>name</em> association that is serialized by <em>serializer</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"serializer","doc":null,"default_value":"","external_name":"serializer","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""}],"args_string":"(name, serializer, key = <span class=\"n\">nil</span>)","location":{"filename":"src/fast-jsonapi-serializer/dsl.cr","line_number":159,"url":null},"def":{"name":"has_many","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"serializer","doc":null,"default_value":"","external_name":"serializer","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      \n{% RELATIONS[name] = {serializer: serializer, key: key || name, type: :has_many} %}\n\n    \n"}},{"id":"has_one(name,serializer,key=nil)-macro","html_id":"has_one(name,serializer,key=nil)-macro","name":"has_one","doc":"Defines `one-to-one` *name* association that is serialized by *serializer*.\n\nFor more details see `.has_many`.","summary":"<p>Defines <code>one-to-one</code> <em>name</em> association that is serialized by <em>serializer</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"serializer","doc":null,"default_value":"","external_name":"serializer","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""}],"args_string":"(name, serializer, key = <span class=\"n\">nil</span>)","location":{"filename":"src/fast-jsonapi-serializer/dsl.cr","line_number":166,"url":null},"def":{"name":"has_one","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"serializer","doc":null,"default_value":"","external_name":"serializer","restriction":""},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      \n{% RELATIONS[name] = {serializer: serializer, key: key || name, type: :has_one} %}\n\n    \n"}}],"types":[]},{"html_id":"fast-jsonapi-serializer/FastJSONAPISerializer/IDAny","path":"FastJSONAPISerializer/IDAny.html","kind":"alias","full_name":"FastJSONAPISerializer::IDAny","name":"IDAny","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/fast-jsonapi-serializer/base.cr","line_number":6,"url":null}],"repository_name":"fast-jsonapi-serializer","program":false,"enum":false,"alias":true,"aliased":"(Int32 | Int64 | String | UUID)","aliased_html":"Int32 | Int64 | String | UUID","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"fast-jsonapi-serializer/FastJSONAPISerializer","kind":"module","full_name":"FastJSONAPISerializer","name":"FastJSONAPISerializer"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"fast-jsonapi-serializer/FastJSONAPISerializer/MetaAny","path":"FastJSONAPISerializer/MetaAny.html","kind":"alias","full_name":"FastJSONAPISerializer::MetaAny","name":"MetaAny","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/fast-jsonapi-serializer/base.cr","line_number":5,"url":null}],"repository_name":"fast-jsonapi-serializer","program":false,"enum":false,"alias":true,"aliased":"(Array(JSON::Any) | Bool | Float64 | Hash(String, JSON::Any) | Int32 | Int64 | String | Nil)","aliased_html":"Array(JSON::Any) | Bool | Float64 | Hash(String, JSON::Any) | Int32 | Int64 | String | Nil","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"fast-jsonapi-serializer/FastJSONAPISerializer","kind":"module","full_name":"FastJSONAPISerializer","name":"FastJSONAPISerializer"},"doc":"Allowed types for *meta* hash values.","summary":"<p>Allowed types for <em>meta</em> hash values.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}})